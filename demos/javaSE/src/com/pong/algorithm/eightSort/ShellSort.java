package com.pong.algorithm.eightSort;

public class ShellSort {
    public static void main(String[] args) {
        int[] nums = {2,1,3,4,3,7,9,5};
        shell(nums);
        for (int num : nums) {
            System.out.println(num);
        }
    }

    public static void shell(int[] nums) {
        
    }
}

//1.定义：
//针对直接插入排序的下效率问题，有人对次进行了改进与升级，这就是现在的希尔排序。希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。
//
//2.基本思路：
//数的个数为length，i=length/2，将下标差值为i的数分为一组，构成有序序列。
//再取i=i/2 ，将下标差值为i的数分为一组，构成有序序列。
//重复第二步，直到k=1执行简单插入排序。
//
//思路
//（1）希尔排序（shell sort）这个排序方法又称为缩小增量排序，是1959年D·L·Shell提出来的。
// 该方法的基本思想是：设待排序元素序列有n个元素，首先取一个整数increment（小于n）
// 作为间隔将全部元素分为increment个子序列，所有距离为increment的元素放在同一个子序列中，
// 在每一个子序列中分别实行直接插入排序。然后缩小间隔increment，重复上述子序列划分和排序工作。
// 直到最后取increment=1，将所有元素放在同一个子序列中排序为止。
//（2）由于开始时，increment的取值较大，每个子序列中的元素较少，排序速度较快，
// 到排序后期increment取值逐渐变小，子序列中元素个数逐渐增多，但由于前面工作的基础，
// 大多数元素已经基本有序，所以排序速度仍然很快。
//
//3.代码实现：
//（1）首先确定每一组序列的下标的间隔，循环每次需要的间隔：int i = length/2; i >0 ; i /= 2
//（2）然后将每一组序列中元素进行插入排序，第二组第一个插入的数字是第一组第一个插入数字之后的那个数组，
// 从i之后每个数字都要进行插入排序，就是插入的序列是各自不同的序列，不是一个一个子序列循环，
// 而是在一个循环中for (int j=i;j<length;j++)完成所有子序列的插入排序。
//（3）直到i=0为止。